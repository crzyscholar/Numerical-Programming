1. Number of pieces of a puzzle
The number of pieces is determined by the number of rows and columns. 
itâ€™s calculated as rows * cols. For example, if rows = 4 and cols = 4, the puzzle will have 16 pieces.

2. What is input domain: square, rectangle, circle, ellipse etc.
The input domain is a rectangular image, as the image is read using cv2.imread() 
and has a width and height. The puzzle pieces will follow a rectangular layout based on the image's dimensions.

3. What are inputs for curve generation?
The inputs for curve generation are:
img_width and img_height: These are the dimensions of the image.
num_rows and num_cols: These define how many divisions or pieces the puzzle will have.
Random parameters like frequency and amplitude control the shape of the curves.

4. How curves can be used for puzzle generation?
Curves are used to create irregular, non-straight edges for the puzzle pieces. Instead of simple 
straight cuts, wavy edges are drawn between the divisions, making each puzzle piece have a unique, edge.

5. Shape of each piece of a puzzle, how is it generated?
The shape of each puzzle piece is rectangular but with wavy, curved edges. The edges of each piece are 
determined by the sinusoidal curves drawn at the row and column boundaries. Each piece is bounded by the intersecting curves.

6. How data points are generated?
Data points for the curves are generated by:
For horizontal curves: y values are calculated based on row positions (i * (img_height // num_rows)), 
and the corresponding x values are generated using np.linspace().
For vertical curves: x values are calculated based on column positions (j * (img_width // num_cols)), 
and the corresponding y values are generated similarly.

7. Which method can be used for curve generation?
Sinusoidal functions are used for generating curves. The sine function (np.sin()) 
is used to create smooth, wavy curves with random frequencies and amplitudes. This method 
generates the curves that give each piece its unique edge shape.
